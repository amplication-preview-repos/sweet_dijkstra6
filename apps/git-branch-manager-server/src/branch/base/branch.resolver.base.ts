/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Branch } from "./Branch";
import { BranchCountArgs } from "./BranchCountArgs";
import { BranchFindManyArgs } from "./BranchFindManyArgs";
import { BranchFindUniqueArgs } from "./BranchFindUniqueArgs";
import { CreateBranchArgs } from "./CreateBranchArgs";
import { UpdateBranchArgs } from "./UpdateBranchArgs";
import { DeleteBranchArgs } from "./DeleteBranchArgs";
import { Repository } from "../../repository/base/Repository";
import { BranchService } from "../branch.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Branch)
export class BranchResolverBase {
  constructor(
    protected readonly service: BranchService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Branch",
    action: "read",
    possession: "any",
  })
  async _branchesMeta(
    @graphql.Args() args: BranchCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Branch])
  @nestAccessControl.UseRoles({
    resource: "Branch",
    action: "read",
    possession: "any",
  })
  async branches(@graphql.Args() args: BranchFindManyArgs): Promise<Branch[]> {
    return this.service.branches(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Branch, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Branch",
    action: "read",
    possession: "own",
  })
  async branch(
    @graphql.Args() args: BranchFindUniqueArgs
  ): Promise<Branch | null> {
    const result = await this.service.branch(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Branch)
  @nestAccessControl.UseRoles({
    resource: "Branch",
    action: "create",
    possession: "any",
  })
  async createBranch(@graphql.Args() args: CreateBranchArgs): Promise<Branch> {
    return await this.service.createBranch({
      ...args,
      data: {
        ...args.data,

        repository: args.data.repository
          ? {
              connect: args.data.repository,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Branch)
  @nestAccessControl.UseRoles({
    resource: "Branch",
    action: "update",
    possession: "any",
  })
  async updateBranch(
    @graphql.Args() args: UpdateBranchArgs
  ): Promise<Branch | null> {
    try {
      return await this.service.updateBranch({
        ...args,
        data: {
          ...args.data,

          repository: args.data.repository
            ? {
                connect: args.data.repository,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Branch)
  @nestAccessControl.UseRoles({
    resource: "Branch",
    action: "delete",
    possession: "any",
  })
  async deleteBranch(
    @graphql.Args() args: DeleteBranchArgs
  ): Promise<Branch | null> {
    try {
      return await this.service.deleteBranch(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Repository, {
    nullable: true,
    name: "repository",
  })
  @nestAccessControl.UseRoles({
    resource: "Repository",
    action: "read",
    possession: "any",
  })
  async getRepository(
    @graphql.Parent() parent: Branch
  ): Promise<Repository | null> {
    const result = await this.service.getRepository(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
