/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Branch as PrismaBranch,
  Repository as PrismaRepository,
} from "@prisma/client";

export class BranchServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BranchCountArgs, "select">): Promise<number> {
    return this.prisma.branch.count(args);
  }

  async branches(args: Prisma.BranchFindManyArgs): Promise<PrismaBranch[]> {
    return this.prisma.branch.findMany(args);
  }
  async branch(
    args: Prisma.BranchFindUniqueArgs
  ): Promise<PrismaBranch | null> {
    return this.prisma.branch.findUnique(args);
  }
  async createBranch(args: Prisma.BranchCreateArgs): Promise<PrismaBranch> {
    return this.prisma.branch.create(args);
  }
  async updateBranch(args: Prisma.BranchUpdateArgs): Promise<PrismaBranch> {
    return this.prisma.branch.update(args);
  }
  async deleteBranch(args: Prisma.BranchDeleteArgs): Promise<PrismaBranch> {
    return this.prisma.branch.delete(args);
  }

  async getRepository(parentId: string): Promise<PrismaRepository | null> {
    return this.prisma.branch
      .findUnique({
        where: { id: parentId },
      })
      .repository();
  }
}
